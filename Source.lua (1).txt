-- Library Core
local Library = {}
Library.__index = Library

-- Default settings
local defaultSettings = {
    Themes = {
        Purple = {
            Main = Color3.fromRGB(64, 0, 128),
            Secondary = Color3.fromRGB(96, 0, 192),
            Text = Color3.fromRGB(255, 255, 255),
            Background = Color3.fromRGB(20, 20, 20),
            Accent = Color3.fromRGB(128, 0, 255),
            LightAccent = Color3.fromRGB(160, 80, 255),
            DarkAccent = Color3.fromRGB(32, 0, 64)
        }
    },
    Icons = {
        Home = "rbxassetid://1234567890",
        Settings = "rbxassetid://1234567891",
        Info = "rbxassetid://1234567892"
    },
    Scale = 1
}

-- Initialize library
function Library.new()
    local self = setmetatable({}, Library)
    
    self.Themes = defaultSettings.Themes
    self.Icons = defaultSettings.Icons
    self.Scale = defaultSettings.Scale
    self.CurrentTheme = "Purple"
    self.Windows = {}
    
    return self
end

-- Library functions
function Library:GetIcon(iconName)
    return self.Icons[iconName] or ""
end

function Library:SetTheme(themeName)
    if self.Themes[themeName] then
        self.CurrentTheme = themeName
        -- Update all existing windows with new theme
        for _, window in pairs(self.Windows) do
            window:UpdateTheme(self.Themes[themeName])
        end
    end
end

function Library:SetScale(scale)
    self.Scale = math.clamp(scale, 0.5, 2)
    -- Update all existing windows with new scale
    for _, window in pairs(self.Windows) do
        window:UpdateScale(self.Scale)
    end
end

function Library:MakeWindow(config)
    local window = Window.new(config, self.Themes[self.CurrentTheme], self.Scale)
    table.insert(self.Windows, window)
    return window
end

-- Window class
local Window = {}
Window.__index = Window

function Window.new(config, theme, scale)
    local self = setmetatable({}, Window)
    
    self.Title = config.Title or "Window"
    self.SubTitle = config.SubTitle or ""
    self.SaveFolder = config.SaveFolder or false
    self.Theme = theme
    self.Scale = scale
    self.Tabs = {}
    self.Visible = true
    
    -- Create the actual GUI elements here (ScreenGui, Frame, etc.)
    -- This is simplified for the example
    self.Gui = Instance.new("ScreenGui")
    self.MainFrame = Instance.new("Frame")
    self.MainFrame.Parent = self.Gui
    self.MainFrame.BackgroundColor3 = theme.Background
    
    self.TitleLabel = Instance.new("TextLabel")
    self.TitleLabel.Parent = self.MainFrame
    self.TitleLabel.Text = self.Title
    self.TitleLabel.TextColor3 = theme.Text
    
    self.SubTitleLabel = Instance.new("TextLabel")
    self.SubTitleLabel.Parent = self.MainFrame
    self.SubTitleLabel.Text = self.SubTitle
    self.SubTitleLabel.TextColor3 = theme.Text
    
    -- Apply scale
    self:UpdateScale(scale)
    self:UpdateTheme(theme)
    
    return self
end

function Window:UpdateTheme(theme)
    self.Theme = theme
    self.MainFrame.BackgroundColor3 = theme.Background
    self.TitleLabel.TextColor3 = theme.Text
    self.SubTitleLabel.TextColor3 = theme.Text
    -- Update all tabs and their elements
    for _, tab in pairs(self.Tabs) do
        tab:UpdateTheme(theme)
    end
end

function Window:UpdateScale(scale)
    self.Scale = scale
    -- Update all GUI elements with new scale
    -- This would adjust sizes and positions
end

function Window:MakeTab(config)
    local tab = Tab.new(config, self.Theme, self.Scale)
    table.insert(self.Tabs, tab)
    return tab
end

function Window:CloseBtn()
    -- Show confirmation dialog then close
    self:Destroy()
end

function Window:MinimizeBtn()
    self.Visible = not self.Visible
    self.Gui.Enabled = self.Visible
end

function Window:Minimize()
    self.Visible = false
    self.Gui.Enabled = false
end

function Window:Set(title, subtitle)
    self.Title = title or self.Title
    self.SubTitle = subtitle or self.SubTitle
    self.TitleLabel.Text = self.Title
    self.SubTitleLabel.Text = self.SubTitle
end

function Window:SelectTab(tabName)
    for _, tab in pairs(self.Tabs) do
        tab:SetVisible(tab.Title == tabName)
    end
end

function Window:Destroy()
    self.Gui:Destroy()
    for i, window in pairs(Library.Windows) do
        if window == self then
            table.remove(Library.Windows, i)
            break
        end
    end
end

-- Tab class
local Tab = {}
Tab.__index = Tab

function Tab.new(config, theme, scale)
    local self = setmetatable({}, Tab)
    
    self.Title = config.Title or "Tab"
    self.Icon = config.Icon or ""
    self.Theme = theme
    self.Scale = scale
    self.Enabled = true
    self.Visible = true
    self.Sections = {}
    self.Elements = {}
    
    -- Create GUI elements
    self.TabButton = Instance.new("TextButton")
    self.TabButton.Text = self.Title
    self.TabButton.TextColor3 = theme.Text
    
    self.ContentFrame = Instance.new("Frame")
    self.ContentFrame.BackgroundColor3 = theme.Background
    
    return self
end

function Tab:UpdateTheme(theme)
    self.Theme = theme
    self.TabButton.TextColor3 = theme.Text
    self.ContentFrame.BackgroundColor3 = theme.Background
    -- Update all sections and elements
    for _, section in pairs(self.Sections) do
        section:UpdateTheme(theme)
    end
    for _, element in pairs(self.Elements) do
        if element.UpdateTheme then
            element:UpdateTheme(theme)
        end
    end
end

function Tab:AddSection(config)
    local section = Section.new(config, self.Theme, self.Scale)
    table.insert(self.Sections, section)
    return section
end

function Tab:AddParagraph(config)
    local paragraph = Paragraph.new(config, self.Theme, self.Scale)
    table.insert(self.Elements, paragraph)
    return paragraph
end

function Tab:AddButton(config)
    local button = Button.new(config, self.Theme, self.Scale)
    table.insert(self.Elements, button)
    return button
end

function Tab:AddToggle(config)
    local toggle = Toggle.new(config, self.Theme, self.Scale)
    table.insert(self.Elements, toggle)
    return toggle
end

function Tab:AddDropdown(config)
    local dropdown = Dropdown.new(config, self.Theme, self.Scale)
    table.insert(self.Elements, dropdown)
    return dropdown
end

function Tab:AddSlider(config)
    local slider = Slider.new(config, self.Theme, self.Scale)
    table.insert(self.Elements, slider)
    return slider
end

function Tab:AddTextBox(config)
    local textbox = TextBox.new(config, self.Theme, self.Scale)
    table.insert(self.Elements, textbox)
    return textbox
end

function Tab:Disable()
    self.Enabled = false
    self.TabButton.Visible = false
    self.ContentFrame.Visible = false
end

function Tab:Enable()
    self.Enabled = true
    self.TabButton.Visible = true
    self.ContentFrame.Visible = self.Visible
end

function Tab:SetVisible(visible)
    self.Visible = visible
    self.ContentFrame.Visible = visible and self.Enabled
end

function Tab:Destroy()
    self.TabButton:Destroy()
    self.ContentFrame:Destroy()
    for i, tab in pairs(Window.Tabs) do
        if tab == self then
            table.remove(Window.Tabs, i)
            break
        end
    end
end

-- Section class
local Section = {}
Section.__index = Section

function Section.new(config, theme, scale)
    local self = setmetatable({}, Section)
    
    self.Title = config.Title or "Section"
    self.Theme = theme
    self.Scale = scale
    self.Visible = true
    
    -- Create GUI elements
    self.Frame = Instance.new("Frame")
    self.Frame.BackgroundColor3 = theme.DarkAccent
    
    self.TitleLabel = Instance.new("TextLabel")
    self.TitleLabel.Text = self.Title
    self.TitleLabel.TextColor3 = theme.Text
    self.TitleLabel.Parent = self.Frame
    
    return self
end

function Section:UpdateTheme(theme)
    self.Theme = theme
    self.Frame.BackgroundColor3 = theme.DarkAccent
    self.TitleLabel.TextColor3 = theme.Text
end

function Section:SetVisible(visible)
    self.Visible = visible
    self.Frame.Visible = visible
end

function Section:Set(title)
    self.Title = title or self.Title
    self.TitleLabel.Text = self.Title
end

function Section:Destroy()
    self.Frame:Destroy()
end

-- Paragraph class
local Paragraph = {}
Paragraph.__index = Paragraph

function Paragraph.new(config, theme, scale)
    local self = setmetatable({}, Paragraph)
    
    self.Title = config.Title or "Paragraph"
    self.Text = config.Text or ""
    self.Theme = theme
    self.Scale = scale
    self.Visible = true
    
    -- Create GUI elements
    self.Frame = Instance.new("Frame")
    self.Frame.BackgroundTransparency = 1
    
    self.TitleLabel = Instance.new("TextLabel")
    self.TitleLabel.Text = self.Title
    self.TitleLabel.TextColor3 = theme.Text
    self.TitleLabel.Parent = self.Frame
    
    self.TextLabel = Instance.new("TextLabel")
    self.TextLabel.Text = self.Text
    self.TextLabel.TextColor3 = theme.Text
    self.TextLabel.Parent = self.Frame
    
    return self
end

function Paragraph:UpdateTheme(theme)
    self.Theme = theme
    self.TitleLabel.TextColor3 = theme.Text
    self.TextLabel.TextColor3 = theme.Text
end

function Paragraph:SetVisible(visible)
    self.Visible = visible
    self.Frame.Visible = visible
end

function Paragraph:Set(title, text)
    self.Title = title or self.Title
    self.Text = text or self.Text
    self.TitleLabel.Text = self.Title
    self.TextLabel.Text = self.Text
end

function Paragraph:SetTitle(title)
    self.Title = title or self.Title
    self.TitleLabel.Text = self.Title
end

function Paragraph:SetDesc(text)
    self.Text = text or self.Text
    self.TextLabel.Text = self.Text
end

function Paragraph:Destroy()
    self.Frame:Destroy()
end

-- Button class
local Button = {}
Button.__index = Button

function Button.new(config, theme, scale)
    local self = setmetatable({}, Button)
    
    self.Title = config.Title or "Button"
    self.Desc = config.Desc or ""
    self.Callback = config.Callback or function() end
    self.Theme = theme
    self.Scale = scale
    self.Visible = true
    
    -- Create GUI elements
    self.Frame = Instance.new("Frame")
    self.Frame.BackgroundColor3 = theme.Secondary
    
    self.Button = Instance.new("TextButton")
    self.Button.Text = self.Title
    self.Button.TextColor3 = theme.Text
    self.Button.BackgroundColor3 = theme.Accent
    self.Button.Parent = self.Frame
    
    self.DescLabel = Instance.new("TextLabel")
    self.DescLabel.Text = self.Desc
    self.DescLabel.TextColor3 = theme.Text
    self.DescLabel.Parent = self.Frame
    
    self.Button.MouseButton1Click:Connect(function()
        self.Callback()
    end)
    
    return self
end

function Button:UpdateTheme(theme)
    self.Theme = theme
    self.Frame.BackgroundColor3 = theme.Secondary
    self.Button.TextColor3 = theme.Text
    self.Button.BackgroundColor3 = theme.Accent
    self.DescLabel.TextColor3 = theme.Text
end

function Button:SetVisible(visible)
    self.Visible = visible
    self.Frame.Visible = visible
end

function Button:Set(title, desc)
    self.Title = title or self.Title
    self.Desc = desc or self.Desc
    self.Button.Text = self.Title
    self.DescLabel.Text = self.Desc
end

function Button:Callback(func)
    self.Callback = func or self.Callback
end

function Button:Destroy()
    self.Frame:Destroy()
end

-- Toggle class
local Toggle = {}
Toggle.__index = Toggle

function Toggle.new(config, theme, scale)
    local self = setmetatable({}, Toggle)
    
    self.Title = config.Title or "Toggle"
    self.Desc = config.Desc or ""
    self.Callback = config.Callback or function() end
    self.Default = config.Default or false
    self.Flag = config.Flag or false
    self.Value = self.Default
    self.Theme = theme
    self.Scale = scale
    self.Visible = true
    
    -- Create GUI elements
    self.Frame = Instance.new("Frame")
    self.Frame.BackgroundColor3 = theme.Secondary
    
    self.ToggleButton = Instance.new("TextButton")
    self.ToggleButton.Text = self.Title
    self.ToggleButton.TextColor3 = theme.Text
    self.ToggleButton.Parent = self.Frame
    
    self.ToggleFrame = Instance.new("Frame")
    self.ToggleFrame.BackgroundColor3 = self.Value and theme.Accent or theme.DarkAccent
    self.ToggleFrame.Parent = self.Frame
    
    self.DescLabel = Instance.new("TextLabel")
    self.DescLabel.Text = self.Desc
    self.DescLabel.TextColor3 = theme.Text
    self.DescLabel.Parent = self.Frame
    
    self.ToggleButton.MouseButton1Click:Connect(function()
        self:Set(not self.Value)
    end)
    
    self:Set(self.Default)
    
    return self
end

function Toggle:UpdateTheme(theme)
    self.Theme = theme
    self.Frame.BackgroundColor3 = theme.Secondary
    self.ToggleButton.TextColor3 = theme.Text
    self.ToggleFrame.BackgroundColor3 = self.Value and theme.Accent or theme.DarkAccent
    self.DescLabel.TextColor3 = theme.Text
end

function Toggle:SetVisible(visible)
    self.Visible = visible
    self.Frame.Visible = visible
end

function Toggle:Set(value)
    self.Value = value
    self.ToggleFrame.BackgroundColor3 = value and self.Theme.Accent or self.Theme.DarkAccent
    self.Callback(value)
end

function Toggle:Set(title, desc)
    self.Title = title or self.Title
    self.Desc = desc or self.Desc
    self.ToggleButton.Text = self.Title
    self.DescLabel.Text = self.Desc
end

function Toggle:Callback(func)
    self.Callback = func or self.Callback
end

function Toggle:Destroy()
    self.Frame:Destroy()
end

-- Dropdown class
local Dropdown = {}
Dropdown.__index = Dropdown

function Dropdown.new(config, theme, scale)
    local self = setmetatable({}, Dropdown)
    
    self.Title = config.Title or "Dropdown"
    self.Desc = config.Desc or ""
    self.Options = config.Options or {}
    self.Callback = config.Callback or function() end
    self.Default = config.Default or self.Options[1]
    self.Flag = config.Flag or false
    self.MultiSelect = config.MultiSelect or false
    self.Value = self.MultiSelect and {} or self.Default
    self.Theme = theme
    self.Scale = scale
    self.Visible = true
    self.Open = false
    
    -- Create GUI elements
    self.Frame = Instance.new("Frame")
    self.Frame.BackgroundColor3 = theme.Secondary
    
    self.DropdownButton = Instance.new("TextButton")
    self.DropdownButton.Text = self.Title .. ": " .. (self.MultiSelect and "Multiple" or tostring(self.Default))
    self.DropdownButton.TextColor3 = theme.Text
    self.DropdownButton.Parent = self.Frame
    
    self.DropdownList = Instance.new("ScrollingFrame")
    self.DropdownList.Visible = false
    self.DropdownList.BackgroundColor3 = theme.DarkAccent
    self.DropdownList.Parent = self.Frame
    
    self.DescLabel = Instance.new("TextLabel")
    self.DescLabel.Text = self.Desc
    self.DescLabel.TextColor3 = theme.Text
    self.DescLabel.Parent = self.Frame
    
    -- Create option buttons
    self.OptionButtons = {}
    for _, option in pairs(self.Options) do
        local button = Instance.new("TextButton")
        button.Text = option
        button.TextColor3 = theme.Text
        button.BackgroundColor3 = theme.Secondary
        button.Parent = self.DropdownList
        
        button.MouseButton1Click:Connect(function()
            if self.MultiSelect then
                if table.find(self.Value, option) then
                    table.remove(self.Value, table.find(self.Value, option))
                else
                    table.insert(self.Value, option)
                end
                self.DropdownButton.Text = self.Title .. ": " .. table.concat(self.Value, ", ")
            else
                self.Value = option
                self.DropdownButton.Text = self.Title .. ": " .. option
                self.DropdownList.Visible = false
                self.Open = false
            end
            self.Callback(self.Value)
        end)
        
        table.insert(self.OptionButtons, button)
    end
    
    self.DropdownButton.MouseButton1Click:Connect(function()
        self.Open = not self.Open
        self.DropdownList.Visible = self.Open
    end)
    
    return self
end

function Dropdown:UpdateTheme(theme)
    self.Theme = theme
    self.Frame.BackgroundColor3 = theme.Secondary
    self.DropdownButton.TextColor3 = theme.Text
    self.DropdownList.BackgroundColor3 = theme.DarkAccent
    self.DescLabel.TextColor3 = theme.Text
    
    for _, button in pairs(self.OptionButtons) do
        button.TextColor3 = theme.Text
        button.BackgroundColor3 = theme.Secondary
    end
end

function Dropdown:SetVisible(visible)
    self.Visible = visible
    self.Frame.Visible = visible
    if not visible then
        self.DropdownList.Visible = false
        self.Open = false
    end
end

function Dropdown:Add(...)
    local options = {...}
    for _, option in pairs(options) do
        if not table.find(self.Options, option) then
            table.insert(self.Options, option)
            
            local button = Instance.new("TextButton")
            button.Text = option
            button.TextColor3 = self.Theme.Text
            button.BackgroundColor3 = self.Theme.Secondary
            button.Parent = self.DropdownList
            
            button.MouseButton1Click:Connect(function()
                if self.MultiSelect then
                    if table.find(self.Value, option) then
                        table.remove(self.Value, table.find(self.Value, option))
                    else
                        table.insert(self.Value, option)
                    end
                    self.DropdownButton.Text = self.Title .. ": " .. table.concat(self.Value, ", ")
                else
                    self.Value = option
                    self.DropdownButton.Text = self.Title .. ": " .. option
                    self.DropdownList.Visible = false
                    self.Open = false
                end
                self.Callback(self.Value)
            end)
            
            table.insert(self.OptionButtons, button)
        end
    end
end

function Dropdown:Remove(option)
    local index = table.find(self.Options, option)
    if index then
        table.remove(self.Options, index)
        self.OptionButtons[index]:Destroy()
        table.remove(self.OptionButtons, index)
        
        if self.MultiSelect then
            local valIndex = table.find(self.Value, option)
            if valIndex then
                table.remove(self.Value, valIndex)
                self.DropdownButton.Text = self.Title .. ": " .. table.concat(self.Value, ", ")
            end
        elseif self.Value == option then
            self.Value = self.Options[1] or ""
            self.DropdownButton.Text = self.Title .. ": " .. tostring(self.Value)
        end
    end
end

function Dropdown:Select(option)
    if table.find(self.Options, option) then
        if self.MultiSelect then
            if not table.find(self.Value, option) then
                table.insert(self.Value, option)
                self.DropdownButton.Text = self.Title .. ": " .. table.concat(self.Value, ", ")
            end
        else
            self.Value = option
            self.DropdownButton.Text = self.Title .. ": " .. option
        end
        self.Callback(self.Value)
    end
end

function Dropdown:Set(options, clear)
    if clear then
        for _, button in pairs(self.OptionButtons) do
            button:Destroy()
        end
        self.Options = {}
        self.OptionButtons = {}
        if self.MultiSelect then
            self.Value = {}
        else
            self.Value = nil
        end
    end
    
    for _, option in pairs(options) do
        if not table.find(self.Options, option) then
            table.insert(self.Options, option)
            
            local button = Instance.new("TextButton")
            button.Text = option
            button.TextColor3 = self.Theme.Text
            button.BackgroundColor3 = self.Theme.Secondary
            button.Parent = self.DropdownList
            
            button.MouseButton1Click:Connect(function()
                if self.MultiSelect then
                    if table.find(self.Value, option) then
                        table.remove(self.Value, table.find(self.Value, option))
                    else
                        table.insert(self.Value, option)
                    end
                    self.DropdownButton.Text = self.Title .. ": " .. table.concat(self.Value, ", ")
                else
                    self.Value = option
                    self.DropdownButton.Text = self.Title .. ": " .. option
                    self.DropdownList.Visible = false
                    self.Open = false
                end
                self.Callback(self.Value)
            end)
            
            table.insert(self.OptionButtons, button)
        end
    end
end

function Dropdown:Callback(func)
    self.Callback = func or self.Callback
end

function Dropdown:Destroy()
    self.Frame:Destroy()
end

-- Slider class
local Slider = {}
Slider.__index = Slider

function Slider.new(config, theme, scale)
    local self = setmetatable({}, Slider)
    
    self.Title = config.Title or "Slider"
    self.Desc = config.Desc or ""
    self.Min = config.Min or 0
    self.Max = config.Max or 100
    self.Increase = config.Increase or 1
    self.Callback = config.Callback or function() end
    self.Flag = config.Flag or false
    self.Default = config.Default or ((self.Max - self.Min) / 2)
    self.Value = self.Default
    self.Theme = theme
    self.Scale = scale
    self.Visible = true
    
    -- Create GUI elements
    self.Frame = Instance.new("Frame")
    self.Frame.BackgroundColor3 = theme.Secondary
    
    self.SliderTrack = Instance.new("Frame")
    self.SliderTrack.BackgroundColor3 = theme.DarkAccent
    self.SliderTrack.Parent = self.Frame
    
    self.SliderFill = Instance.new("Frame")
    self.SliderFill.BackgroundColor3 = theme.Accent
    self.SliderFill.Parent = self.SliderTrack
    
    self.SliderButton = Instance.new("TextButton")
    self.SliderButton.Text = ""
    self.SliderButton.BackgroundColor3 = theme.LightAccent
    self.SliderButton.Parent = self.SliderFill
    
    self.ValueLabel = Instance.new("TextLabel")
    self.ValueLabel.Text = tostring(self.Value)
    self.ValueLabel.TextColor3 = theme.Text
    self.ValueLabel.Parent = self.Frame
    
    self.TitleLabel = Instance.new("TextLabel")
    self.TitleLabel.Text = self.Title
    self.TitleLabel.TextColor3 = theme.Text
    self.TitleLabel.Parent = self.Frame
    
    self.DescLabel = Instance.new("TextLabel")
    self.DescLabel.Text = self.Desc
    self.DescLabel.TextColor3 = theme.Text
    self.DescLabel.Parent = self.Frame
    
    -- Slider logic
    local function updateSlider(input)
        local pos = UDim2.new(
            math.clamp((input.Position.X - self.SliderTrack.AbsolutePosition.X) / self.SliderTrack.AbsoluteSize.X, 0, 1),
            0, 1, 0
        )
        self.SliderFill.Size = pos
        
        local value = math.floor((((pos.X.Scale * self.Max) / self.Increase) + 0.5) * self.Increase
        value = math.clamp(value, self.Min, self.Max)
        
        if value ~= self.Value then
            self.Value = value
            self.ValueLabel.Text = tostring(value)
            self.Callback(value)
        end
    end
    
    self.SliderButton.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
        end
    end)
    
    self.SliderButton.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            updateSlider(input)
        end
    end)
    
    -- Set initial value
    local initialPos = UDim2.new((self.Value - self.Min) / (self.Max - self.Min), 0, 1, 0)
    self.SliderFill.Size = initialPos
    
    return self
end

function Slider:UpdateTheme(theme)
    self.Theme = theme
    self.Frame.BackgroundColor3 = theme.Secondary
    self.SliderTrack.BackgroundColor3 = theme.DarkAccent
    self.SliderFill.BackgroundColor3 = theme.Accent
    self.SliderButton.BackgroundColor3 = theme.LightAccent
    self.ValueLabel.TextColor3 = theme.Text
    self.TitleLabel.TextColor3 = theme.Text
    self.DescLabel.TextColor3 = theme.Text
end

function Slider:SetVisible(visible)
    self.Visible = visible
    self.Frame.Visible = visible
end

function Slider:Set(title, desc)
    self.Title = title or self.Title
    self.Desc = desc or self.Desc
    self.TitleLabel.Text = self.Title
    self.DescLabel.Text = self.Desc
end

function Slider:Callback(func)
    self.Callback = func or self.Callback
end

function Slider:Destroy()
    self.Frame:Destroy()
end

-- TextBox class
local TextBox = {}
TextBox.__index = TextBox

function TextBox.new(config, theme, scale)
    local self = setmetatable({}, TextBox)
    
    self.Title = config.Title or "Text Box"
    self.Desc = config.Desc or ""
    self.Default = config.Default or ""
    self.PlaceholderText = config.PlaceholderText or "< Input >"
    self.ClearText = config.ClearText or false
    self.Callback = config.Callback or function() end
    self.Value = self.Default
    self.Theme = theme
    self.Scale = scale
    self.Visible = true
    
    -- Create GUI elements
    self.Frame = Instance.new("Frame")
    self.Frame.BackgroundColor3 = theme.Secondary
    
    self.InputBox = Instance.new("TextBox")
    self.InputBox.Text = self.Default
    self.InputBox.PlaceholderText = self.PlaceholderText
    self.InputBox.TextColor3 = theme.Text
    self.InputBox.BackgroundColor3 = theme.DarkAccent
    self.InputBox.Parent = self.Frame
    
    self.TitleLabel = Instance.new("TextLabel")
    self.TitleLabel.Text = self.Title
    self.TitleLabel.TextColor3 = theme.Text
    self.TitleLabel.Parent = self.Frame
    
    self.DescLabel = Instance.new("TextLabel")
    self.DescLabel.Text = self.Desc
    self.DescLabel.TextColor3 = theme.Text
    self.DescLabel.Parent = self.Frame
    
    self.InputBox.FocusLost:Connect(function()
        self.Value = self.InputBox.Text
        self.Callback(self.Value)
    end)
    
    if self.ClearText then
        self.InputBox.Focused:Connect(function()
            self.InputBox.Text = ""
        end)
    end
    
    return self
end

function TextBox:UpdateTheme(theme)
    self.Theme = theme
    self.Frame.BackgroundColor3 = theme.Secondary
    self.InputBox.TextColor3 = theme.Text
    self.InputBox.BackgroundColor3 = theme.DarkAccent
    self.TitleLabel.TextColor3 = theme.Text
    self.DescLabel.TextColor3 = theme.Text
end

function TextBox:SetVisible(visible)
    self.Visible = visible
    self.Frame.Visible = visible
end

function TextBox:Destroy()
    self.Frame:Destroy()
end

-- Initialize the library
local function CreateLibrary()
    return Library.new()
end

return CreateLibrary()
